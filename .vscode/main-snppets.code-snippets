{
	// Place your Programozási_tételek workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// \"Print to console": {
	// \t"scope": \"javascript,typescript",
	// \t"prefix": \"log",
	// \t"body": [
	// \t\t"console.log('$1');",
	// \t\t"$2"
	// \t],
	// \t"description": \"Log output to console"
	// }
	"count": {
		"scope": "csharp",
		"prefix": "count",
		"body": [
			"list.Count$0"
		],
		"description": "Counts the elements in a list"
	},
	"fullCount": {
		"scope": "csharp",
		"prefix": "fcount",
		"body": [
			"int result = list.Count;$0"
		],
		"description": "Counts the elements in a list with a variable"
	},
	// "List average": {
	// 	"scope": "csharp",
	// 	"prefix": "average",
	// 	"body": [
	// 		"double result = 0;\nfor(int i = 0; i < list.Count; i++)\n{\n\tresult += list[i];\n}\nresult = result / list.Count;\nreturn $\"{result}\";",
	// 	],
	// 	"description": "The average of a list"
	// },
	"List average": {
		"scope": "csharp",
		"prefix": "average",
		"body": [
			"double result = Math.Round(list.Average()*10)/10;$0"
		],
		"description": "Makes a variable which returns the average of a list"
	},
	"NthRoot": {
		"scope": "csharp",
		"prefix": "rootNth",
		"body": [
			"static double NthRoot(double A, int N)",
        	"{",
        	"\treturn Math.Pow(A, 1.0 / N);",
        	"}"
		],
		"description": "Makes an NthRoot function"
	},
	"isInt": {
		"scope": "csharp",
		"prefix": "tempisInt",
		"body": [
			"static bool isInt(double N)",
        	"{",
        	"\tif (Math.Round(N) == N)",
        	"\t{",
        	"\t\treturn true;",
        	"\t}",
        	"\telse",
        	"\t{",
        	"\t\treturn false;",
        	"\t}",
        	"}"
		],
		"description": "Makes an isInt function"
	},
	"3000 Template": {
		"scope": "csharp",
		"prefix": "nemestemplate",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Text;",
			"using System.Threading.Tasks;",
			"using System.IO;",
			"",
			"namespace ${1:TaskName}",
			"{",
			"\tpublic class Program",
			"\t{",
			"static List<int> read()",
        	"{",
            "\tList<int> lista = new List<int>();",
			"\t",
            "\tstring elso_sor = Console.ReadLine();",
			"\t",
            "\tstring[] sortomb = elso_sor.Split(' ');",
			"\t",
            "\tint N = int.Parse(sortomb[0]);",
			"\t",
            "\t//lista.Add(N);",
			"\t",
            "\tfor (int i = 0; i < N; i++)",
            "\t{",
            "\t\tlista.Add(int.Parse(Console.ReadLine()));",
            "\t}",
            "\treturn lista;",
        	"}",
			"$2",
			"\t\tpublic static void Main(string[] args)",
			"\t\t{",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"}",
		],
	"description": "3000 template"
	}
}